"""
This module contains functions that handle (pseudo)random algorithms.
"""
def unique(char_list):
    """
    Uses recursion to determine if the input list contains all unique elements.
    NOTE: Could be easily checked by converting list to set then back to list 
            and comparing that to original, but that's no fun.

    Inputs:
            char_list (list): List to check uniqueness of elements.

    Outputs:
            (boolean): True if all elements within list are unique. Else False.
    """

    if len(char_list) <= 1:    # Base case to check single element list
        return True 

    elif char_list[0] in char_list[1:]:
        return False

    else:
        return unique(char_list[1:])

def non_unique_chars(char_list, returnlist=[]):
    """
    Uses recursion to return all non-unique elements within input list.

    Inputs:
            char_list (list): List to check uniqueness of elements.
            returnlist (list): List with non-unique elements from char_list.

    Outputs:
            returnlist (list): List of all non-unique characters in input list.
    """

    if len(char_list) <= 1:
        return returnlist

    elif char_list[0] not in returnlist:

        if char_list[0] in char_list[1:]:
            returnlist.append(char_list[0])

    return non_unique_chars(char_list[1:], returnlist)




def pseudorandom_lcg(a, c, m, Xi, N):
    """
    Produces a list of pseudorandom generated numbers using the linear 
    congruential generator algorithm.

    Inputs:
            a (integer): The multiplier in the LCG algorithm.

            c (integer): The increment in the LCG algorithm.

            m (integer): The modulus in the LCG algorithm.

            Xi (integer): The seed value in a call to the LCG algorithm.

            N (integer): The number integers generated by the LCG algorithm.

    Output:
            returnlist (integer list): List of numbers generated by algorithm.
    """
    
    returnlist = []

    if N == 0:
        return returnlist
    
    else:
        new_X = (a*Xi + c)%m

        returnlist.append(new_X)
    
    returnlist.extend(pseudorandom_lcg(a, c, m, new_X, N-1))

    return returnlist